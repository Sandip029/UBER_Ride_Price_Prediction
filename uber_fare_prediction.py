# -*- coding: utf-8 -*-
"""uber_fare_prediction

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XZlXFgX1VhEOouJpBIlGZElwe7F9F5Yb
"""

!pip install streamlit -q

from google.colab import drive
import streamlit as st
import joblib
import pandas as pd
import numpy as np
from sklearn.base import BaseEstimator, TransformerMixin
from sklearn.pipeline import Pipeline
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.decomposition import PCA

drive.mount('/content/drive')

class FeatureEngineering(BaseEstimator, TransformerMixin):
    def __init__(self):
        self.pca = PCA(n_components=2)

    def fit(self, X, y=None):
        if not isinstance(X, pd.DataFrame):
            X = pd.DataFrame(X, columns=['pickup_latitude', 'pickup_longitude', 'dropoff_latitude', 'dropoff_longitude'])

        X = X.dropna()

        if all(col in X.columns for col in ['pickup_latitude', 'pickup_longitude', 'dropoff_latitude', 'dropoff_longitude']):
            coords = X[['pickup_latitude', 'pickup_longitude', 'dropoff_latitude', 'dropoff_longitude']].values
            self.pca.fit(coords)
        return self

    def transform(self, X, y=None):
        X = X.copy()
        X = X.dropna()
        if all(col in X.columns for col in ['pickup_latitude', 'pickup_longitude', 'dropoff_latitude', 'dropoff_longitude']):
            def distance_km(lon1, lat1, lon2, lat2):
                R = 6371
                dlon = np.radians(lon2 - lon1)
                dlat = np.radians(lat2 - lat1)
                a = (np.sin(dlat/2) ** 2 +
                     np.cos(np.radians(lat1)) * np.cos(np.radians(lat2)) * np.sin(dlon/2) ** 2)
                c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))
                km = R * c
                return km

            def calculate_bearing(lat1, lon1, lat2, lon2):
                dLon = np.radians(lon2 - lon1)
                lat1 = np.radians(lat1)
                lat2 = np.radians(lat2)
                y = np.sin(dLon) * np.cos(lat2)
                x = np.cos(lat1) * np.sin(lat2) - np.sin(lat1) * np.cos(lat2) * np.cos(dLon)
                bearing = np.degrees(np.arctan2(y, x))
                return (bearing + 360) % 360

            X['distance'] = distance_km(X['pickup_longitude'], X['pickup_latitude'], X['dropoff_longitude'], X['dropoff_latitude'])
            X['bearing'] = X.apply(lambda row: calculate_bearing(row['pickup_latitude'], row['pickup_longitude'], row['dropoff_latitude'], row['dropoff_longitude']), axis=1)

            coords = X[['pickup_latitude', 'pickup_longitude', 'dropoff_latitude', 'dropoff_longitude']].values
            pca_coords = self.pca.transform(coords)
            X['pca_1'] = pca_coords[:, 0]
            X['pca_2'] = pca_coords[:, 1]

        return X[['year', 'month', 'hour', 'distance', 'bearing', 'pca_1', 'pca_2']]

class DataPreprocessor(BaseEstimator, TransformerMixin):
    def fit(self, X, y=None):
        return self

    def transform(self, X, y=None):
        X = X.copy()
        if 'fare_amount' in X.columns:
            X.dropna(inplace=True)
            X = X[X['fare_amount'] > 0]
            X = X[X['passenger_count'] <= 6]
            X = X[~((X['pickup_longitude'] == 0) & (X['pickup_latitude'] == 0) &
                    (X['dropoff_longitude'] == 0) & (X['dropoff_latitude'] == 0))]

        if 'pickup_datetime' in X.columns:
            X['pickup_datetime'] = pd.to_datetime(X['pickup_datetime'])
            X['year'] = X['pickup_datetime'].dt.year
            X['month'] = X['pickup_datetime'].dt.month
            X['day'] = X['pickup_datetime'].dt.day
            X['hour'] = X['pickup_datetime'].dt.hour
            X['minute'] = X['pickup_datetime'].dt.minute
            X['day_of_week'] = X['pickup_datetime'].dt.dayofweek
            X.drop(columns=['key', 'Unnamed: 0', 'pickup_datetime'], errors='ignore', inplace=True)

        return X

# Load the dataset
url = 'https://raw.githubusercontent.com/Sandip029/UBER_Ride_Price_Prediction/main/uber.csv'
df = pd.read_csv(url)
X = df.drop(columns=['fare_amount'])
y = df['fare_amount']
y = y.astype(float)
desired_sample_size = 70000
data = pd.concat([X, y], axis=1)
important_data = data[data['fare_amount'] > 150]
remaining_sample_size = desired_sample_size - len(important_data)
remaining_sample_size = max(remaining_sample_size, 0)
remaining_data = data[data['fare_amount'] <= 150]
frac = remaining_sample_size / len(remaining_data)
sampled_remaining_data = remaining_data.groupby('fare_amount', group_keys=False).apply(lambda x: x.sample(frac=frac, random_state=42))
df = pd.concat([important_data, sampled_remaining_data])
df = df.sample(n=desired_sample_size, random_state=42) if len(df) > desired_sample_size else df

# Instantiate DataPreprocessor and FeatureEngineering
data_preprocessing = DataPreprocessor()
feature_engineering = FeatureEngineering()

# Preprocess and fit PCA
df_processed = data_preprocessing.fit_transform(df)
feature_engineering.fit(df_processed)

# Load the pipeline
pipeline = joblib.load('/content/drive/My Drive/best_pipeline.joblib')

st.title('UBER Fare Prediction')

passenger_count = st.number_input('Passenger Count', min_value=1, max_value=8, value=1)
year = st.number_input('Year', min_value=2010, max_value=2024, value=2024)
month = st.number_input('Month', min_value=1, max_value=12, value=7)
day = st.number_input('Day', min_value=1, max_value=31, value=19)
hour = st.number_input('Hour', min_value=0, max_value=23, value=8)
minute = st.number_input('Minute', min_value=0, max_value=59, value=28)
pickup_latitude = st.number_input('Pickup Latitude', value=40.665420, format="%.6f")
pickup_longitude = st.number_input('Pickup Longitude', value=-73.797236, format="%.6f")
dropoff_latitude = st.number_input('Dropoff Latitude', value=40.812208, format="%.6f")
dropoff_longitude = st.number_input('Dropoff Longitude', value=-73.101445, format="%.6f")
day_of_week = st.selectbox('Day of the Week', [0, 1, 2, 3, 4, 5, 6], format_func=lambda x: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'][x])

new_data = pd.DataFrame({
    'passenger_count': [passenger_count],
    'year': [year],
    'month': [month],
    'day': [day],
    'hour': [hour],
    'minute': [minute],
    'pickup_latitude': [pickup_latitude],
    'pickup_longitude': [pickup_longitude],
    'dropoff_latitude': [dropoff_latitude],
    'dropoff_longitude': [dropoff_longitude],
    'day_of_week': [day_of_week]
})

if st.button('Predict Fare'):
    predicted_fare = pipeline.predict(new_data)
    st.markdown(f"""
        <div style="display: flex; justify-content: center; align-items: center; padding: 10px; border: 2px solid #4CAF50; border-radius: 10px; background-color: #f9f9f9; margin-top: 20px;">
            <h2 style="color: #4CAF50;">The predicted fare is: ${predicted_fare[0]:.2f}</h2>
        </div>
    """, unsafe_allow_html=True)